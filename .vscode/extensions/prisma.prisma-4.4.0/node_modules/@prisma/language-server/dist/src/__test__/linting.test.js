"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const MessageHandler_1 = require("../MessageHandler");
const vscode_languageserver_1 = require("vscode-languageserver");
const assert = __importStar(require("assert"));
const helper_1 = require("./helper");
function assertLinting(expected, fixturePath) {
    const document = (0, helper_1.getTextDocument)(fixturePath);
    const diagnosticsResults = (0, MessageHandler_1.handleDiagnosticsRequest)(document);
    assert.ok(diagnosticsResults.length != 0);
    expected.forEach((expectedDiagnostic, i) => {
        const actualDiagnostic = diagnosticsResults[i];
        assert.strictEqual(actualDiagnostic.message, expectedDiagnostic.message);
        assert.deepStrictEqual(actualDiagnostic.range, expectedDiagnostic.range);
        assert.strictEqual(actualDiagnostic.severity, expectedDiagnostic.severity);
    });
}
suite('Linting', () => {
    const fixturePathMissingArgument = './linting/missingArgument.prisma';
    const fixturePathWrongType = './linting/wrongType.prisma';
    test('Missing argument', () => {
        assertLinting([
            {
                message: 'Argument "provider" is missing in data source block "db".',
                range: {
                    start: { line: 0, character: 0 },
                    end: { line: 2, character: 1 },
                },
                severity: vscode_languageserver_1.DiagnosticSeverity.Error,
            },
        ], fixturePathMissingArgument);
    });
    test('Wrong type', () => {
        assertLinting([
            {
                message: 'Type "Use" is neither a built-in type, nor refers to another model, custom type, or enum.',
                range: {
                    start: { line: 14, character: 12 },
                    end: { line: 14, character: 15 },
                },
                severity: vscode_languageserver_1.DiagnosticSeverity.Error,
            },
        ], fixturePathWrongType);
    });
});
//# sourceMappingURL=linting.test.js.map