var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};
__markAsModule(exports);
__export(exports, {
  AstroSnapshot: () => AstroSnapshot,
  AstroSnapshotManager: () => AstroSnapshotManager
});
var import_astro2tsx = __toModule(require("./astro2tsx.js"));
var import_source_mapper = __toModule(require("./source-mapper.js"));
var import_utils = __toModule(require("./utils.js"));
class AstroSnapshot {
  constructor(typescript, fileName, astroCode, mapper, logger, isTsFile) {
    this.typescript = typescript;
    this.fileName = fileName;
    this.astroCode = astroCode;
    this.mapper = mapper;
    this.logger = logger;
    this.isTsFile = isTsFile;
    this.convertInternalCodePositions = false;
  }
  update(astroCode, mapper) {
    this.astroCode = astroCode;
    this.mapper = mapper;
    this.lineOffsets = void 0;
    this.log("Updated Snapshot");
  }
  getOriginalTextSpan(textSpan) {
    if (!(0, import_utils.isNoTextSpanInGeneratedCode)(this.getText(), textSpan)) {
      return null;
    }
    const start = this.getOriginalOffset(textSpan.start);
    if (start === -1) {
      return null;
    }
    return {
      start,
      length: textSpan.length
    };
  }
  getOriginalOffset(generatedOffset) {
    if (!this.scriptInfo) {
      return generatedOffset;
    }
    this.toggleMappingMode(true);
    const lineOffset = this.scriptInfo.positionToLineOffset(generatedOffset);
    this.debug("try convert offset", generatedOffset, "/", lineOffset);
    const original = this.mapper.getOriginalPosition({
      line: lineOffset.line - 1,
      character: lineOffset.offset - 1
    });
    this.toggleMappingMode(false);
    if (original.line === -1) {
      return -1;
    }
    const originalOffset = this.scriptInfo.lineOffsetToPosition(original.line + 1, original.character + 1);
    this.debug("converted offset to", original, "/", originalOffset);
    return originalOffset;
  }
  setAndPatchScriptInfo(scriptInfo) {
    scriptInfo.scriptKind = this.typescript.ScriptKind.TSX;
    const positionToLineOffset = scriptInfo.positionToLineOffset.bind(scriptInfo);
    scriptInfo.positionToLineOffset = (position) => {
      if (this.convertInternalCodePositions) {
        const lineOffset2 = positionToLineOffset(position);
        this.debug("positionToLineOffset for generated code", position, lineOffset2);
        return lineOffset2;
      }
      const lineOffset = this.positionAt(position);
      this.debug("positionToLineOffset for original code", position, lineOffset);
      return {line: lineOffset.line + 1, offset: lineOffset.character + 1};
    };
    const lineOffsetToPosition = scriptInfo.lineOffsetToPosition.bind(scriptInfo);
    scriptInfo.lineOffsetToPosition = (line, offset) => {
      if (this.convertInternalCodePositions) {
        const position2 = lineOffsetToPosition(line, offset);
        this.debug("lineOffsetToPosition for generated code", {line, offset}, position2);
        return position2;
      }
      const position = this.offsetAt({line: line - 1, character: offset - 1});
      this.debug("lineOffsetToPosition for original code", {line, offset}, position);
      return position;
    };
    this.scriptInfo = scriptInfo;
    this.log("patched scriptInfo");
  }
  positionAt(offset) {
    offset = this.clamp(offset, 0, this.astroCode.length);
    const lineOffsets = this.getLineOffsets();
    let low = 0;
    let high = lineOffsets.length;
    if (high === 0) {
      return {line: 0, character: offset};
    }
    while (low < high) {
      const mid = Math.floor((low + high) / 2);
      if (lineOffsets[mid] > offset) {
        high = mid;
      } else {
        low = mid + 1;
      }
    }
    const line = low - 1;
    return {line, character: offset - lineOffsets[line]};
  }
  offsetAt(position) {
    const lineOffsets = this.getLineOffsets();
    if (position.line >= lineOffsets.length) {
      return this.astroCode.length;
    } else if (position.line < 0) {
      return 0;
    }
    const lineOffset = lineOffsets[position.line];
    const nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this.astroCode.length;
    return this.clamp(nextLineOffset, lineOffset, lineOffset + position.character);
  }
  getLineOffsets() {
    if (this.lineOffsets) {
      return this.lineOffsets;
    }
    const lineOffsets = [];
    const text = this.astroCode;
    let isLineStart = true;
    for (let i = 0; i < text.length; i++) {
      if (isLineStart) {
        lineOffsets.push(i);
        isLineStart = false;
      }
      const ch = text.charAt(i);
      isLineStart = ch === "\r" || ch === "\n";
      if (ch === "\r" && i + 1 < text.length && text.charAt(i + 1) === "\n") {
        i++;
      }
    }
    if (isLineStart && text.length > 0) {
      lineOffsets.push(text.length);
    }
    this.lineOffsets = lineOffsets;
    return lineOffsets;
  }
  clamp(num, min, max) {
    return Math.max(min, Math.min(max, num));
  }
  log(...args) {
    this.logger.log("AstroSnapshot:", this.fileName, "-", ...args);
  }
  debug(...args) {
    this.logger.debug("AstroSnapshot:", this.fileName, "-", ...args);
  }
  toggleMappingMode(convertInternalCodePositions) {
    this.convertInternalCodePositions = convertInternalCodePositions;
  }
  getText() {
    var _a;
    const snapshot = (_a = this.scriptInfo) == null ? void 0 : _a.getSnapshot();
    if (!snapshot) {
      return "";
    }
    return snapshot.getText(0, snapshot.getLength());
  }
}
class AstroSnapshotManager {
  constructor(typescript, projectService, logger) {
    this.typescript = typescript;
    this.projectService = projectService;
    this.logger = logger;
    this.snapshots = new Map();
    this.patchProjectServiceReadFile();
  }
  get(fileName) {
    return this.snapshots.get(fileName);
  }
  create(fileName) {
    if (this.snapshots.has(fileName)) {
      return this.snapshots.get(fileName);
    }
    const scriptInfo = this.projectService.getOrCreateScriptInfoForNormalizedPath(this.typescript.server.toNormalizedPath(fileName), false);
    if (!scriptInfo) {
      this.logger.log("Was not able get snapshot for", fileName);
      return;
    }
    try {
      scriptInfo.getSnapshot();
    } catch (e) {
      this.logger.log("Loading Snapshot failed", fileName);
    }
    const snapshot = this.snapshots.get(fileName);
    if (!snapshot) {
      this.logger.log("Astro snapshot was not found after trying to load script snapshot for", fileName);
      return;
    }
    snapshot.setAndPatchScriptInfo(scriptInfo);
    this.snapshots.set(fileName, snapshot);
    return snapshot;
  }
  patchProjectServiceReadFile() {
    const readFile = this.projectService.host.readFile;
    this.projectService.host.readFile = (path) => {
      if ((0, import_utils.isAstroFilePath)(path)) {
        this.logger.debug("Read Astro file:", path);
        const astroCode = readFile(path) || "";
        try {
          const isTsFile = true;
          const result = (0, import_astro2tsx.astro2tsx)(astroCode, {
            filename: path.split("/").pop(),
            isTsFile
          });
          const existingSnapshot = this.snapshots.get(path);
          if (existingSnapshot) {
            existingSnapshot.update(astroCode, new import_source_mapper.SourceMapper(result.map.mappings));
          } else {
            this.snapshots.set(path, new AstroSnapshot(this.typescript, path, astroCode, new import_source_mapper.SourceMapper(result.map.mappings), this.logger, isTsFile));
          }
          this.logger.log("Successfully read Astro file contents of", path);
          return result.code;
        } catch (e) {
          this.logger.log("Error loading Astro file:", path);
          this.logger.debug("Error:", e);
        }
      } else {
        return readFile(path);
      }
    };
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AstroSnapshot,
  AstroSnapshotManager
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL2FzdHJvLXNuYXBzaG90cy50cyJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0EsdUJBQTBCO0FBRTFCLDJCQUE2QjtBQUM3QixtQkFBNkQ7QUFFdEQsb0JBQW9CO0FBQUEsRUFLMUIsWUFDUyxZQUNBLFVBQ0EsV0FDQSxRQUNBLFFBQ1EsVUFDZjtBQU5PO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDUTtBQVJULHdDQUErQjtBQUFBO0FBQUEsRUFXdkMsT0FBTyxXQUFtQixRQUFzQjtBQUMvQyxTQUFLLFlBQVk7QUFDakIsU0FBSyxTQUFTO0FBQ2QsU0FBSyxjQUFjO0FBQ25CLFNBQUssSUFBSTtBQUFBO0FBQUEsRUFHVixvQkFBb0IsVUFBMkM7QUFDOUQsUUFBSSxDQUFDLDhDQUE0QixLQUFLLFdBQVcsV0FBVztBQUMzRCxhQUFPO0FBQUE7QUFHUixVQUFNLFFBQVEsS0FBSyxrQkFBa0IsU0FBUztBQUM5QyxRQUFJLFVBQVUsSUFBSTtBQUNqQixhQUFPO0FBQUE7QUFJUixXQUFPO0FBQUEsTUFDTjtBQUFBLE1BQ0EsUUFBUSxTQUFTO0FBQUE7QUFBQTtBQUFBLEVBSW5CLGtCQUFrQixpQkFBeUI7QUFDMUMsUUFBSSxDQUFDLEtBQUssWUFBWTtBQUNyQixhQUFPO0FBQUE7QUFHUixTQUFLLGtCQUFrQjtBQUN2QixVQUFNLGFBQWEsS0FBSyxXQUFXLHFCQUFxQjtBQUN4RCxTQUFLLE1BQU0sc0JBQXNCLGlCQUFpQixLQUFLO0FBQ3ZELFVBQU0sV0FBVyxLQUFLLE9BQU8sb0JBQW9CO0FBQUEsTUFDaEQsTUFBTSxXQUFXLE9BQU87QUFBQSxNQUN4QixXQUFXLFdBQVcsU0FBUztBQUFBO0FBRWhDLFNBQUssa0JBQWtCO0FBQ3ZCLFFBQUksU0FBUyxTQUFTLElBQUk7QUFDekIsYUFBTztBQUFBO0FBR1IsVUFBTSxpQkFBaUIsS0FBSyxXQUFXLHFCQUFxQixTQUFT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
