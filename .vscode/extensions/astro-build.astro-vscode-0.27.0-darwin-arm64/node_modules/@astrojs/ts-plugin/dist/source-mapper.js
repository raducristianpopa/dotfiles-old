var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};
__markAsModule(exports);
__export(exports, {
  SourceMapper: () => SourceMapper
});
var import_sourcemap_codec = __toModule(require("sourcemap-codec"));
function binaryInsert(array, value, key) {
  if (key === 0)
    key = "0";
  const index = 1 + binarySearch(array, key ? value[key] : value, key);
  let i = array.length;
  while (index !== i--)
    array[1 + i] = array[i];
  array[index] = value;
}
function binarySearch(array, target, key) {
  if (!array || array.length === 0)
    return -1;
  if (key === 0)
    key = "0";
  let low = 0;
  let high = array.length - 1;
  while (low <= high) {
    const i = low + (high - low >> 1);
    const item = key === void 0 ? array[i] : array[i][key];
    if (item === target)
      return i;
    if (item < target)
      low = i + 1;
    else
      high = i - 1;
  }
  if ((low = ~low) < 0)
    low = ~low - 1;
  return low;
}
class SourceMapper {
  constructor(mappings) {
    if (typeof mappings === "string")
      this.mappings = (0, import_sourcemap_codec.decode)(mappings);
    else
      this.mappings = mappings;
  }
  getOriginalPosition(position) {
    const lineMap = this.mappings[position.line];
    if (!lineMap) {
      return {line: -1, character: -1};
    }
    const closestMatch = binarySearch(lineMap, position.character, 0);
    const match = lineMap[closestMatch];
    if (!match) {
      return {line: -1, character: -1};
    }
    const {2: line, 3: character} = match;
    return {line, character};
  }
  getGeneratedPosition(position) {
    if (!this.reverseMappings)
      this.computeReversed();
    const lineMap = this.reverseMappings[position.line];
    if (!lineMap) {
      return {line: -1, character: -1};
    }
    const closestMatch = binarySearch(lineMap, position.character, 0);
    const match = lineMap[closestMatch];
    if (!match) {
      return {line: -1, character: -1};
    }
    const {1: line, 2: character} = match;
    return {line, character};
  }
  computeReversed() {
    this.reverseMappings = {};
    for (let generated_line = 0; generated_line !== this.mappings.length; generated_line++) {
      for (const {0: generated_index, 2: original_line, 3: original_character_index} of this.mappings[generated_line]) {
        const reordered_char = [original_character_index, generated_line, generated_index];
        if (original_line in this.reverseMappings)
          binaryInsert(this.reverseMappings[original_line], reordered_char, 0);
        else
          this.reverseMappings[original_line] = [reordered_char];
      }
    }
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SourceMapper
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL3NvdXJjZS1tYXBwZXIudHMiXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSw2QkFBdUI7QUF3QnZCLHNCQUNDLE9BQ0EsT0FDQSxLQUNDO0FBQ0QsTUFBSSxBQUFNLFFBQU47QUFBVyxVQUFNO0FBQ3JCLFFBQU0sUUFBUSxJQUFJLGFBQWEsT0FBUSxNQUFNLE1BQU0sT0FBTyxPQUFrQjtBQUM1RSxNQUFJLElBQUksTUFBTTtBQUNkLFNBQU8sVUFBVTtBQUFLLFVBQU0sSUFBSSxLQUFLLE1BQU07QUFDM0MsUUFBTSxTQUFTO0FBQUE7QUFHaEIsc0JBQWlELE9BQVksUUFBZ0IsS0FBMEI7QUFDdEcsTUFBSSxDQUFDLFNBQVMsQUFBTSxNQUFNLFdBQVo7QUFBb0IsV0FBTztBQUN6QyxNQUFJLEFBQU0sUUFBTjtBQUFXLFVBQU07QUFDckIsTUFBSSxNQUFNO0FBQ1YsTUFBSSxPQUFPLE1BQU0sU0FBUztBQUMxQixTQUFPLE9BQU8sTUFBTTtBQUNuQixVQUFNLElBQUksTUFBUSxRQUFPLE9BQVE7QUFDakMsVUFBTSxPQUFPLEFBQWMsUUFBZCxTQUFvQixNQUFNLEtBQUssTUFBTSxHQUFHO0FBQ3JELFFBQUksU0FBUztBQUFRLGFBQU87QUFDNUIsUUFBSSxPQUFPO0FBQVEsWUFBTSxJQUFJO0FBQUE7QUFDeEIsYUFBTyxJQUFJO0FBQUE7QUFFakIsTUFBSyxPQUFNLENBQUMsT0FBTztBQUFHLFVBQU0sQ0FBQyxNQUFNO0FBQ25DLFNBQU87QUFBQTtBQUdELG1CQUFtQjtBQUFBLEVBSXpCLFlBQVksVUFBZ0M7QUFDM0MsUUFBSSxPQUFPLGFBQWE7QUFBVSxXQUFLLFdBQVcsbUNBQU87QUFBQTtBQUNwRCxXQUFLLFdBQVc7QUFBQTtBQUFBLEVBR3RCLG9CQUFvQixVQUE4QjtBQUNqRCxVQUFNLFVBQVUsS0FBSyxTQUFTLFNBQVM7QUFDdkMsUUFBSSxDQUFDLFNBQVM7QUFDYixhQUFPLENBQUUsTUFBTSxJQUFJLFdBQVc7QUFBQTtBQUcvQixVQUFNLGVBQWUsYUFBYSxTQUFTLFNBQVMsV0FBVztBQUMvRCxVQUFNLFFBQVEsUUFBUTtBQUN0QixRQUFJLENBQUMsT0FBTztBQUNYLGFBQU8sQ0FBRSxNQUFNLElBQUksV0FBVztBQUFBO0FBRy9CLFVBQU0sQ0FBRSxHQUFHLE1BQU0sR0FBRyxhQUFjO0FBQ2xDLFdBQU8sQ0FBRSxNQUFNO0FBQUE7QUFBQSxFQUdoQixxQkFBcUIsVUFBOEI7QUFDbEQsUUFBSSxDQUFDLEtBQUs7QUFBaUIsV0FBSztBQUNoQyxVQUFNLFVBQVUsS0FBSyxnQkFBaUIsU0FBUztBQUMvQyxRQUFJLENBQUMsU0FBUztBQUNiLGFBQU8sQ0FBRSxNQUFNLElBQUksV0FBVztBQUFBO0FBRy9CLFVBQU0sZUFBZSxhQUFhLFNBQVMsU0FBUyxXQUFXO0FBQy9ELFVBQU0sUUFBUSxRQUFRO0FBQ3RCLFFBQUksQ0FBQyxPQUFPO0FBQ1gsYUFBTyxDQUFFLE1BQU0sSUFBSSxXQUFXO0FBQUE7QUFHL0IsVUFBTSxDQUFFLEdBQUcsTUFBTSxHQUFHLGFBQWM7QUFDbEMsV0FBTyxDQUFFLE1BQU07QUFBQTtBQUFBLEVBR1Isa0JBQWtCO0FBQ3pCLFNBQUssa0JBQWtCO0FBQ3ZCLGFBQVMsaUJBQWlCLEdBQUcsbUJBQW1CLEtBQUssU0FBUyxRQUFRLGtCQUFrQjtBQUN2RixpQkFBVyxDQUFFLEdBQUcsaUJBQWlCLEdBQUcsZUFBZSxHQUFHLDZCQUE4QixLQUFLLFNBQ3hGLGlCQUNFO0FBQ0YsY0FBTSxpQkFBZ0MsQ0FBQywwQkFBMEIsZ0JBQWdCO0FBQ2pGLFlBQUksaUJBQWlCLEtBQUs7QUFBaUIsdUJBQWEsS0FBSyxnQkFBZ0IsZ0JBQWdCLGdCQUFnQjtBQUFBO0FBQ3hHLGVBQUssZ0JBQWdCLGlCQUFpQixDQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUE7IiwKICAibmFtZXMiOiBbXQp9Cg==
