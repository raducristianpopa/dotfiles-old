var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};
__markAsModule(exports);
__export(exports, {
  patchModuleLoader: () => patchModuleLoader
});
var import_astro_sys = __toModule(require("./astro-sys.js"));
var import_utils = __toModule(require("./utils.js"));
class ModuleResolutionCache {
  constructor() {
    this.cache = new Map();
  }
  get(moduleName, containingFile) {
    return this.cache.get(this.getKey(moduleName, containingFile));
  }
  set(moduleName, containingFile, resolvedModule) {
    if (!resolvedModule) {
      return;
    }
    this.cache.set(this.getKey(moduleName, containingFile), resolvedModule);
  }
  delete(resolvedModuleName) {
    this.cache.forEach((val, key) => {
      if (val.resolvedFileName === resolvedModuleName) {
        this.cache.delete(key);
      }
    });
  }
  getKey(moduleName, containingFile) {
    return containingFile + ":::" + (0, import_utils.ensureRealAstroFilePath)(moduleName);
  }
}
function patchModuleLoader(logger, snapshotManager, typescript, lsHost, project) {
  var _a;
  const astroSys = (0, import_astro_sys.createAstroSys)(logger);
  const moduleCache = new ModuleResolutionCache();
  const origResolveModuleNames = (_a = lsHost.resolveModuleNames) == null ? void 0 : _a.bind(lsHost);
  lsHost.resolveModuleNames = resolveModuleNames;
  const origRemoveFile = project.removeFile.bind(project);
  project.removeFile = (info, fileExists, detachFromProject) => {
    logger.log("File is being removed. Delete from cache: ", info.fileName);
    moduleCache.delete(info.fileName);
    return origRemoveFile(info, fileExists, detachFromProject);
  };
  function resolveModuleNames(moduleNames, containingFile, reusedNames, redirectedReference, compilerOptions) {
    logger.log("Resolving modules names for " + containingFile);
    const resolved = (origResolveModuleNames == null ? void 0 : origResolveModuleNames(moduleNames, containingFile, reusedNames, redirectedReference, compilerOptions)) || Array.from(Array(moduleNames.length));
    return resolved.map((moduleName, idx) => {
      const fileName = moduleNames[idx];
      if (moduleName || !(0, import_utils.ensureRealAstroFilePath)(fileName).endsWith(".astro")) {
        return moduleName;
      }
      const cachedModule = moduleCache.get(fileName, containingFile);
      if (cachedModule) {
        return cachedModule;
      }
      const resolvedModule = resolveModuleName(fileName, containingFile, compilerOptions);
      moduleCache.set(fileName, containingFile, resolvedModule);
      return resolvedModule;
    });
  }
  function resolveModuleName(name, containingFile, compilerOptions) {
    const astroResolvedModule = typescript.resolveModuleName(name, containingFile, compilerOptions, astroSys).resolvedModule;
    if (!astroResolvedModule || !(0, import_utils.isVirtualAstroFilePath)(astroResolvedModule.resolvedFileName)) {
      return astroResolvedModule;
    }
    const resolvedFileName = (0, import_utils.ensureRealAstroFilePath)(astroResolvedModule.resolvedFileName);
    logger.log("Resolved", name, "to astro file", resolvedFileName);
    const snapshot = snapshotManager.create(resolvedFileName);
    if (!snapshot) {
      return void 0;
    }
    const resolvedAstroModule = {
      extension: snapshot.isTsFile ? typescript.Extension.Tsx : typescript.Extension.Jsx,
      resolvedFileName
    };
    return resolvedAstroModule;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  patchModuleLoader
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL21vZHVsZS1sb2FkZXIudHMiXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQSx1QkFBK0I7QUFFL0IsbUJBQWdFO0FBS2hFLDRCQUE0QjtBQUFBLEVBQTVCLGNBVEE7QUFVUyxpQkFBUSxJQUFJO0FBQUE7QUFBQSxFQUtwQixJQUFJLFlBQW9CLGdCQUF1RDtBQUM5RSxXQUFPLEtBQUssTUFBTSxJQUFJLEtBQUssT0FBTyxZQUFZO0FBQUE7QUFBQSxFQU0vQyxJQUFJLFlBQW9CLGdCQUF3QixnQkFBK0M7QUFDOUYsUUFBSSxDQUFDLGdCQUFnQjtBQUNwQjtBQUFBO0FBRUQsU0FBSyxNQUFNLElBQUksS0FBSyxPQUFPLFlBQVksaUJBQWlCO0FBQUE7QUFBQSxFQU96RCxPQUFPLG9CQUFrQztBQUN4QyxTQUFLLE1BQU0sUUFBUSxDQUFDLEtBQUssUUFBUTtBQUNoQyxVQUFJLElBQUkscUJBQXFCLG9CQUFvQjtBQUNoRCxhQUFLLE1BQU0sT0FBTztBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS2IsT0FBTyxZQUFvQixnQkFBd0I7QUFDMUQsV0FBTyxpQkFBaUIsUUFBUSwwQ0FBd0I7QUFBQTtBQUFBO0FBYW5ELDJCQUNOLFFBQ0EsaUJBQ0EsWUFDQSxRQUNBLFNBQ087QUE3RFI7QUE4REMsUUFBTSxXQUFXLHFDQUFlO0FBQ2hDLFFBQU0sY0FBYyxJQUFJO0FBQ3hCLFFBQU0seUJBQXlCLGFBQU8sdUJBQVAsbUJBQTJCLEtBQUs7QUFFL0QsU0FBTyxxQkFBcUI7QUFFNUIsUUFBTSxpQkFBaUIsUUFBUSxXQUFXLEtBQUs7QUFDL0MsVUFBUSxhQUFhLENBQUMsTUFBTSxZQUFZLHNCQUFzQjtBQUM3RCxXQUFPLElBQUksOENBQThDLEtBQUs7QUFDOUQsZ0JBQVksT0FBTyxLQUFLO0FBQ3hCLFdBQU8sZUFBZSxNQUFNLFlBQVk7QUFBQTtBQUd6Qyw4QkFDQyxhQUNBLGdCQUNBLGFBQ0EscUJBQ0EsaUJBQ3VDO0FBQ3ZDLFdBQU8sSUFBSSxpQ0FBaUM7QUFLNUMsVUFBTSxXQUNMLGtFQUF5QixhQUFhLGdCQUFnQixhQUFhLHFCQUFxQixxQkFDeEYsTUFBTSxLQUFnQixNQUFNLFlBQVk7QUFFekMsV0FBTyxTQUFTLElBQUksQ0FBQyxZQUFZLFFBQVE7QUFDeEMsWUFBTSxXQUFXLFlBQVk7QUFDN0IsVUFBSSxjQUFjLENBQUMsMENBQXdCLFVBQVUsU0FBUyxXQUFXO0FBQ3hFLGVBQU87QUFBQTtBQUdSLFlBQU0sZUFBZSxZQUFZLElBQUksVUFBVTtBQUMvQyxVQUFJLGNBQWM7QUFDakIsZUFBTztBQUFBO0FBR1IsWUFBTSxpQkFBaUIsa0JBQWtCLFVBQVUsZ0JBQWdCO0FBQ25FLGtCQUFZLElBQUksVUFBVSxnQkFBZ0I7QUFDMUMsYUFBTztBQUFBO0FBQUE7QUFJVCw2QkFDQyxNQUNBLGdCQUNBLGlCQUNnQztBQUNoQyxVQUFNLHNCQUFzQixXQUFXLGtCQUN0QyxNQUNBLGdCQUNBLGlCQUNBLFVBQ0M7QUFDRixRQUFJLENBQUMsdUJBQXVCLENBQUMseUNBQXVCLG9CQUFvQixtQkFBbUI7QUFDMUYsYUFBTztBQUFBO0FBR1IsVUFBTSxtQkFBbUIsMENBQXdCLG9CQUFvQjtBQUNyRSxXQUFPLElBQUksWUFBWSxNQUFNLGlCQUFpQjtBQUM5QyxVQUFNLFdBQVcsZ0JBQWdCLE9BQU87QUFDeEMsUUFBSSxDQUFDLFVBQVU7QUFDZCxhQUFPO0FBQUE7QUFHUixVQUFNLHNCQUE2QztBQUFBLE1BQ2xELFdBQVcsU0FBUyxXQUFXLFdBQVcsVUFBVSxNQUFNLFdBQVcsVUFBVTtBQUFBLE1BQy9FO0FBQUE7QUFFRCxXQUFPO0FBQUE7QUFBQTsiLAogICJuYW1lcyI6IFtdCn0K
